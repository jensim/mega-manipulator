# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run test and verifyPlugin tasks,
# - run buildPlugin task and prepare artifact for the further tests,
# - run IntelliJ Plugin Verifier,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches:
     - main
  # Trigger the workflow on any pull request
  pull_request:
  workflow_dispatch:
    inputs:
      extra_args_gradle:
        description: 'Add additional arguments to the gradle run commands, enabling extra output'
        required: false
        default: '--stacktrace --info'

jobs:
  validateEnvs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate env
        env:
          GITHUB_USERNAME: ${{ secrets.GIT_HUB_CI_USER_NAME }}
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_CI_TOKEN }}
          SRC_COM_ACCESS_TOKEN: ${{ secrets.SRC_COM_ACCESS_TOKEN }}
          GITLAB_USERNAME: ${{ secrets.GITLAB_USERNAME }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_GROUP: ${{ secrets.GITLAB_GROUP }}
          GITLAB_PROJECT: ${{ secrets.GITLAB_PROJECT }}
        shell: bash
        run: |
          #!/bin/bash

          set -e

          MISSING=""
          for env in GITHUB_USERNAME GITHUB_TOKEN SRC_COM_ACCESS_TOKEN ; do
            if [ -z "${!env}" ]; then
              MISSING="$MISSING,$env"
            fi
          done
          FAIL=false
          if [ -n "$MISSING" ]; then
            FAIL=true
          fi
          for env in GITLAB_USERNAME GITLAB_TOKEN GITLAB_GROUP GITLAB_PROJECT ; do
            if [ -z "${!env}" ]; then
              MISSING="$MISSING, $env"
            fi
          done
          if [ -n "$MISSING" ]; then
            echo "Missing tokens: [${MISSING:2}]"
          fi
          if [ "$FAIL" == 'true' ]; then
            exit 1
          fi

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    needs: validateEnvs
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.4

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          IDE_VERSIONS="$(echo "$PROPERTIES" | grep "^pluginVerifierIdeVersions:" | base64)"
          echo "::set-output name=ideVersions::$IDE_VERSIONS"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"
      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: ${{ runner.os }}-plugin-verifier-${{ steps.properties.outputs.ideVersions }}

      - name: Setup git user
        run: |
          git config --global user.email "3663856+jensim@users.noreply.github.com"
          git config --global user.name "Jens Brimfors"

      # Run tests
      - name: Run Tests
        run: ./gradlew test ${{ github.event.inputs.extra_args_gradle }}
        env:
          GITHUB_USERNAME: ${{ secrets.GIT_HUB_CI_USER_NAME }}
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_CI_TOKEN }}
          SRC_COM_ACCESS_TOKEN: ${{ secrets.SRC_COM_ACCESS_TOKEN }}
          GITLAB_USERNAME: ${{ secrets.GITLAB_USERNAME }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_GROUP: ${{ secrets.GITLAB_GROUP }}
          GITLAB_PROJECT: ${{ secrets.GITLAB_PROJECT }}

      # Run verifyPlugin Gradle task
      - name: Verify Plugin
        run: ./gradlew verifyPlugin

      # Run IntelliJ Plugin Verifier action using GitHub Action
      - name: Run Plugin Verifier
        run: ./gradlew runPluginVerifier ${{ github.event.inputs.extra_args_gradle }} -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          require_tests: true
          fail_on_failure: true

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.head_ref || github.run_id }}
      cancel-in-progress: ${{ github.head_ref == 'main' }}
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"
      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Store built plugin as an artifact for downloading
      - name: Upload artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: "${{ steps.properties.outputs.name }} - ${{ steps.properties.outputs.version }}"
          path: ./build/distributions/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.build.outputs.version }} \
            --draft \
            --title "${{ needs.build.outputs.version }}" \
            --notes "${{ needs.build.outputs.changelog }}"
